Python 的作用域遵循一个叫做LEGB的法则。

当 Python 遇到一个变量的话他会按照这样的顺序进行搜索：

本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）

使用 class, def, lambda 会引入一个本地作用域（Local），而且本地作用域是可以嵌套的。内层的变量会屏蔽外层，内层找不到的变量会去外层找

全局作用域（Global）就是模块内的作用域，他的作用范围是单一文件内。

内置函数的作用域就是int(), list()之类的内置函数。

举个栗子：

a1 = 1 # Global

class Test:
    a2 = 1 # Local
    def func():
        a3 = 1 # Local
        def _func():
            a5 = 1 # Local
        for i in range(3):
            a4 = 1 # Local 和 a3 在同一个作用域，因为 for 不会引入新的作用域


上述代码中作用域的范围是 a1 > a2 > a3 == a4 > a5

PS：你也可以使用 global 语句 和 nonlocal 语句来改变他们的作用域

1、声明了全局变量，如果内部函数有引用外部函数的同名变量或者全局变量,并且对这个变量有修改.那么python会认为它是一个局部变量

2、声明全局变量，如果在局部要对全局变量修改，需要在局部也要先声明该全局变量：global 变量

3、在局部如果不声明全局变量，并且不修改全局变量。则可以正常使用全局变量

4、nonlocal关键字用来在函数或其他作用域中使用外层(非全局)变量，nonlocal  适用于在局部函数 中 的局部函数， 把最内层的局部 变量设置成外层局部可用，但是还不是全局的
